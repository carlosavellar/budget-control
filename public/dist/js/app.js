"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){console.log("Budget");var c=function e(t,i,n){_classCallCheck(this,e),this.id=t,this.description=i,this.value=n},a={allItems:{inc:[],exp:[]},totals:{inc:0,exp:0},budget:0,percentage:-1},e=function(e){var t=0;return a.allItems[e].forEach(function(e){return t+=e.value}),a.totals[e]=t};return{addItem:function(e,t,i){var n=void 0,l=void 0;return n=0<a.allItems[e].length?a.allItems[e][a.allItems[e].length-1].id+1:0,"inc"===e?l=new c(n,t,i):"exp"===e&&(l=new c(n,t,i)),a.allItems[e].push(l),l},testings:function(){return a},calculateBudget:function(){e("inc"),e("exp"),a.budget=a.totals.inc-a.totals.exp,console.log(a.totals.inc),0<a.totals.inc&&(a.percentage=a.totals.exp/a.totals.inc*100),a.percentage=-1}}}(),uiController=function(){var c={type:".add__type",desc:".add__description",value:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage"};return{inputVals:function(){return{getType:document.querySelector(c.type).value,getDesc:document.querySelector(c.desc).value,getValue:parseInt(document.querySelector(c.value).value)}},globalInput:function(){return c},addItem:function(e,t){var i=void 0,n=void 0,l=void 0;"inc"===e?(l=c.incList,i='<div class="item clearfix" id="inc-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===e&&(l=c.expList,i='<div class="item clearfix" id="exp-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">21%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),n=(n=(n=i.replace("%id%",t.id)).replace("%desc%",t.description)).replace("%val%",t.value),document.querySelector(l).insertAdjacentHTML("beforeend",n)}}}(),controller=function(i,n){var e=n.globalInput(),t=function(){var e,t;e=n.inputVals(),t=i.addItem(e.getType,e.getDesc,e.getValue),n.addItem(e.getType,t),i.calculateBudget()};return{init:function(){document.querySelector(e.btn).addEventListener("click",t),document.addEventListener("keypress",function(e){13!==e.keycode&&13!==e.which||t()}),i.testings()}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,

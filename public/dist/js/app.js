"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){var l=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i,this.percentages=-1};l.prototype.calcPercentages=function(e){0<e?(console.log(void 0===e?"undefined":_typeof(e)),console.log((void 0).value),(void 0).percentages=Math.round((void 0).value/e*100)):(void 0).percentages=-1},l.prototype.getPercentages=function(){return(void 0).percentages};var a=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i},e=function(e){var t=0;c.allItems[e].forEach(function(e){return t+=e.value}),c.totais[e]=t},c={allItems:{inc:[],exp:[]},totais:{exp:0,inc:0},budget:0,percentage:-1};return{addItem:function(e,t,n){var i=void 0,o=void 0;return o=0<c.allItems[e].length?c.allItems[e][c.allItems[e].length-1].id+1:0,"inc"===e?i=new a(o,t,n):"exp"===e&&(i=new l(o,t,n)),c.allItems[e].push(i),i},calculateBudget:function(){e("inc"),e("exp"),c.budget=c.totais.inc-c.totais.exp,0<c.totais.inc?c.percentage=Math.round(c.totais.exp/c.totais.inc*100):c.percentage=-1},getBudget:function(){return{budget:c.budget,labelInc:c.totais.inc,labelExp:c.totais.exp,percentage:c.percentage}},testings:function(){console.log(c)},deleteItem:function(e,t){var n;-1!==(n=c.allItems[t].map(function(e){return e.id}).indexOf(e))&&c.allItems[t].splice(n,1)},calculatePercentages:function(){c.allItems.exp.forEach(function(e){return e.calcPercentages(c.totais.inc)})},getPercentages:function(){return c.allItems.exp.map(function(e){return e.getPercentages()})}}}(),uiController=function(){var l={type:".add__type",desc:".add__description",value:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage"},a=function(e,t){var n,i,o;return n=(o=(e=(e=Math.abs(e)).toFixed(2)).split("."))[0],i=o[1],console.log(n.substr(0,n.length-3)),3<n.length&&(n=n.substr(0,n.length-3)+"."+n.substr(n.length-3,3)),("inc"===t?"+":"-")+" "+n+","+i};return{inputVals:function(){return{getType:document.querySelector(l.type).value,getDesc:document.querySelector(l.desc).value,getValue:parseInt(document.querySelector(l.value).value)}},globlaStrings:function(){return l},clearFields:function(e,t){document.querySelectorAll(e+","+t).forEach(function(e){e.value=""})},addItem:function(e,t){var n=void 0,i=void 0,o=void 0;"inc"===t?(o=l.incList,n='<div class="item clearfix" id="inc-%id%"> <div class="item__description"> %desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===t&&(o=l.expList,n='<div class="item clearfix" id="exp-%id%"> <div class="item__description"> %desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">21%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),i=(i=(i=n.replace("%id%",e.id)).replace("%desc%",e.description)).replace("%val%",a(e.value,t)),document.querySelector(o).insertAdjacentHTML("beforeend",i)},displayBudget:function(e){e.budget,document.querySelector(l.budget).textContent=a(e.budget,void 0),document.querySelector(l.income_lable).textContent=a(e.labelInc,"+"),document.querySelector(l.expense_lable).textContent=a(e.labelExp,"-"),document.querySelector(l.percentage).textContent=e.percentage},deleteItem:function(e){var t=document.getElementById(e);t.parentNode.removeChild(t)},formatingDate:function(){var e,t,n,i=void 0;e=(i=new Date).getDay(),t=i.getMonth(),n=["January","February","March","April","May","June","July","August","September","October","November","December"],document.querySelector(l.month).textContent=e+" "+n[t]}}}(),controller=function(l,a){var n=a.globlaStrings(),c=function(){l.calculateBudget();var e=l.getBudget();a.displayBudget(e)},e=function(e){var t=void 0,n=void 0,i=void 0,o=void 0;(t=e.target.parentNode.parentNode.parentNode.parentNode.id)&&(o=(n=t.split("-"))[0],i=parseFloat(n[1]),l.deleteItem(i,o),c(),a.deleteItem(t))},t=function(){var e,t=void 0;" "!==(e=a.inputVals()).getDesc&&!isNaN(e.getValue)||0<e.getValue?(t=l.addItem(e.getType,e.getDesc,e.getValue),a.addItem(t,e.getType),a.clearFields(n.desc,n.value),c(),console.log("SIM NESSA PORRA")):console.log("Nada nesse caralho")};return{init:function(){document.querySelector(n.btn).addEventListener("click",t),document.addEventListener("keypress",function(e){13!==e.keyCode&&13!==e.which||t()}),document.querySelector(n.container).addEventListener("click",e),a.displayBudget({budget:0,labelInc:0,labelExp:0,percentage:0}),a.formatingDate()}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,

"use strict";var _createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){console.log("Budget");var c=function(){function i(e,t,n){_classCallCheck(this,i),this.id=e,this.description=t,this.value=n}return _createClass(i,[{key:"calculatePercentages",value:function(e){this.percentages=0<e?Math.round(this.value/e*100):-1}},{key:"getPercentages",value:function(){return this.percentages}}]),i}(),l=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i},r={allItems:{inc:[],exp:[]},totals:{inc:0,exp:0},budget:0,percentage:-1},e=function(e){var t=0;return r.allItems[e].forEach(function(e){return t+=e.value}),r.totals[e]=t};return{addItem:function(e,t,n){var i=void 0,a=void 0;return i=0<r.allItems[e].length?r.allItems[e][r.allItems[e].length-1].id+1:0,"inc"===e?a=new l(i,t,n):"exp"===e&&(a=new c(i,t,n)),r.allItems[e].push(a),a},testings:function(){return r},calculateBudget:function(){e("inc"),e("exp"),r.budget=r.totals.inc-r.totals.exp,console.log(r.totals.inc),0<r.totals.inc?r.percentage=Math.round(r.totals.exp/r.totals.inc*100):r.percentage=-1},getBudget:function(){return{incLable:r.totals.inc,expLable:r.totals.exp,budget:r.budget,percentage:r.percentage}},deleteItem:function(e,t){var n;-1!==(n=r.allItems[e].map(function(e){return e.id}).indexOf(t))&&r.allItems[e].splice(n,1)},calculatePercentages:function(){r.allItems.exp.forEach(function(e){return e.calculatePercentages(r.totals.inc)})},returnPercenatehs:function(){var e=r.allItems.exp.forEach(function(e){return e.getPercentages()});return console.log(e+", isso aqui"),e}}}(),uiController=function(){var c={type:".add__type",desc:".add__description",value:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage"};return{inputVals:function(){return{getType:document.querySelector(c.type).value,getDesc:document.querySelector(c.desc).value,getValue:parseInt(document.querySelector(c.value).value)}},globalInput:function(){return c},addItem:function(e,t){var n=void 0,i=void 0,a=void 0;"inc"===e?(a=c.incList,n='<div class="item clearfix" id="inc-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===e&&(a=c.expList,n='<div class="item clearfix" id="exp-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">21%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),i=(i=(i=n.replace("%id%",t.id)).replace("%desc%",t.description)).replace("%val%",t.value),document.querySelector(a).insertAdjacentHTML("beforeend",i)},displayBudget:function(e){document.querySelector(c.budget).textContent=e.budget,document.querySelector(c.income_lable).textContent=e.incLable,document.querySelector(c.expense_lable).textContent=e.expLable,document.querySelector(c.percentage).textContent=e.percentage}}}(),controller=function(c,n){var e=n.globalInput(),l=function(){var e;c.calculateBudget(),e=c.getBudget(),n.displayBudget(e)},r=function(){c.calculatePercentages(),c.returnPercenatehs()},t=function(e){var t=void 0,n=void 0,i=void 0,a=void 0;(t=e.target.parentNode.parentNode.parentNode.parentNode.id)&&(i=(n=t.split("-"))[0],a=parseFloat(n[1]),c.deleteItem(i,a),l(),r())},i=function(){var e,t;e=n.inputVals(),t=c.addItem(e.getType,e.getDesc,e.getValue),n.addItem(e.getType,t),l(),r()};return{init:function(){document.querySelector(e.btn).addEventListener("click",i),document.addEventListener("keypress",function(e){13!==e.keycode&&13!==e.which||i()}),c.testings(),document.querySelector(e.container).addEventListener("click",t),n.displayBudget({incLable:0,expLable:0,budget:0,percentage:0})}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,

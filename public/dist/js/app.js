"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){var o=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i,this.percentages=-1};o.prototype.calcPercentages=function(e){0<e?(console.log(void 0===e?"undefined":_typeof(e)),console.log((void 0).value),(void 0).percentages=Math.round((void 0).value/e*100)):(void 0).percentages=-1},o.prototype.getPercentages=function(){return(void 0).percentages};var c=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i},e=function(e){var t=0;a.allItems[e].forEach(function(e){return t+=e.value}),a.totais[e]=t},a={allItems:{inc:[],exp:[]},totais:{exp:0,inc:0},budget:0,percentage:-1};return{addItem:function(e,t,n){var i=void 0,l=void 0;return l=0<a.allItems[e].length?a.allItems[e][a.allItems[e].length-1].id+1:0,"inc"===e?i=new c(l,t,n):"exp"===e&&(i=new o(l,t,n)),a.allItems[e].push(i),i},calculateBudget:function(){e("inc"),e("exp"),a.budget=a.totais.inc-a.totais.exp,0<a.totais.inc?a.percentage=Math.round(a.totais.exp/a.totais.inc*100):a.percentage=-1},getBudget:function(){return{budget:a.budget,labelInc:a.totais.inc,labelExp:a.totais.exp,percentage:a.percentage}},testings:function(){console.log(a)},deleteItem:function(e,t){var n;-1!==(n=a.allItems[t].map(function(e){return e.id}).indexOf(e))&&a.allItems[t].splice(n,1)},calculatePercentages:function(){a.allItems.exp.forEach(function(e){return e.calcPercentages(a.totais.inc)})},getPercentages:function(){return a.allItems.exp.map(function(e){return e.getPercentages()})}}}(),uiController=function(){var s={type:".add__type",desc:".add__description",value:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage"};return{inputVals:function(){return{getType:document.querySelector(s.type).value,getDesc:document.querySelector(s.desc).value,getValue:parseInt(document.querySelector(s.value).value)}},globlaStrings:function(){return s},clearFields:function(e,t){document.querySelectorAll(e+","+t).forEach(function(e){e.value=""})},addItem:function(e,t){var n,i,l,o,c=void 0,a=void 0,r=void 0;"inc"===t?(r=s.incList,c='<div class="item clearfix" id="inc-%id%"> <div class="item__description"> %desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===t&&(r=s.expList,c='<div class="item clearfix" id="exp-%id%"> <div class="item__description"> %desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">21%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),a=(a=(a=c.replace("%id%",e.id)).replace("%desc%",e.description)).replace("%val%",(n=e.value,i=t,o=void 0,3<(o=(l=(n=(n=Math.abs(n)).toFixed(2)).split("."))[0]).length&&(o=o.substr(o,o.length-3)+","+o.substr(o.length-3,3)),("inc"===i?"+":"-")+"  "+o+","+l[1])),document.querySelector(r).insertAdjacentHTML("beforeend",a)},displayBudget:function(e){document.querySelector(s.budget).textContent=e.budget,document.querySelector(s.income_lable).textContent=e.labelInc,document.querySelector(s.expense_lable).textContent=e.labelExp,document.querySelector(s.percentage).textContent=e.percentage},deleteItem:function(e){var t=document.getElementById(e);t.parentNode.removeChild(t)}}}(),controller=function(o,c){var n=c.globlaStrings(),a=function(){o.calculateBudget();var e=o.getBudget();c.displayBudget(e)},e=function(e){var t=void 0,n=void 0,i=void 0,l=void 0;(t=e.target.parentNode.parentNode.parentNode.parentNode.id)&&(l=(n=t.split("-"))[0],i=parseFloat(n[1]),o.deleteItem(i,l),a(),c.deleteItem(t))},t=function(){var e,t=void 0;" "!==(e=c.inputVals()).getDesc&&!isNaN(e.getValue)||0<e.getValue?(t=o.addItem(e.getType,e.getDesc,e.getValue),c.addItem(t,e.getType),c.clearFields(n.desc,n.value),a(),console.log("SIM NESSA PORRA")):console.log("Nada nesse caralho")};return{init:function(){document.querySelector(n.btn).addEventListener("click",t),document.addEventListener("keypress",function(e){13!==e.keyCode&&13!==e.which||t()}),document.querySelector(n.container).addEventListener("click",e),c.displayBudget({budget:0,labelInc:0,labelExp:0,percentage:0})}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,

"use strict";var _createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){console.log("Budget");var a=function(){function i(e,t,n){_classCallCheck(this,i),this.id=e,this.description=t,this.value=n}return _createClass(i,[{key:"calcPercentages",value:function(e){this.percentages=0<e?this.value/e*100:-1}},{key:"getPercentages",value:function(){return this.percentages}}]),i}(),l=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.value=i},r={allItems:{inc:[],exp:[]},totals:{inc:0,exp:0},budget:0,percentage:-1},e=function(e){var t=0;return r.allItems[e].forEach(function(e){return t+=e.value}),r.totals[e]=t};return{addItem:function(e,t,n){var i=void 0,c=void 0;return i=0<r.allItems[e].length?r.allItems[e][r.allItems[e].length-1].id+1:0,"inc"===e?c=new l(i,t,n):"exp"===e&&(c=new a(i,t,n)),r.allItems[e].push(c),c},testings:function(){return r},calculateBudget:function(){e("inc"),e("exp"),r.budget=r.totals.inc-r.totals.exp,console.log(r.totals.inc),0<r.totals.inc?r.percentage=Math.round(r.totals.exp/r.totals.inc*100):r.percentage=-1},getBudget:function(){return{incLable:r.totals.inc,expLable:r.totals.exp,budget:r.budget,percentage:r.percentage}},deleteItem:function(e,t){var n;-1!==(n=r.allItems[e].map(function(e){return e.id}).indexOf(t))&&r.allItems[e].splice(n,1)},calculatePercentages:function(){r.allItems.exp.forEach(function(e){return e.calcPercentages(r.totals.inc)})},getPercentages:function(){return r.allItems.exp.map(function(e){return e.getPercentages()})}}}(),uiController=function(){var a={type:".add__type",desc:".add__description",value:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage",item_perce:".item__percentage"},n=function(e,t){var n,i,c=void 0;return c=(i=(e=(e=Math.abs(e)).toFixed(2)).split("."))[0],n=i[1],3<c.length&&(c=c.substr(0,c.length-3)+"."+c.substr(c.length-3,3)),("inc"===t?"+":"-")+" "+c+","+n};return{inputVals:function(){return{getType:document.querySelector(a.type).value,getDesc:document.querySelector(a.desc).value,getValue:parseInt(document.querySelector(a.value).value)}},globalInput:function(){return a},addItem:function(e,t){var n=void 0,i=void 0,c=void 0;"inc"===e?(c=a.incList,n='<div class="item clearfix" id="inc-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===e&&(c=a.expList,n='<div class="item clearfix" id="exp-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">%iPerce%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),i=(i=(i=(i=n.replace("%id%",t.id)).replace("%desc%",t.description)).replace("%val%",t.value)).replace("%iPerce%",t.percentages),document.querySelector(c).insertAdjacentHTML("beforeend",i)},displayBudget:function(e){var t=void 0;t=0<e.budget?"inc":"exp",document.querySelector(a.budget).textContent=n(e.budget,t),document.querySelector(a.income_lable).textContent=n(e.incLable,"+"),document.querySelector(a.expense_lable).textContent=n(e.expLable,"-"),document.querySelector(a.percentage).textContent=e.percentage},displayPercentages:function(n){!function(e,t){for(var n=0;n<e.length;n++)t(e[n],n)}(document.querySelectorAll(a.item_perce),function(e,t){e.textContent=n[t]+"%"})}}}(),controller=function(a,n){var e=n.globalInput(),l=function(){var e;a.calculateBudget(),e=a.getBudget(),n.displayBudget(e)},t=function(e){var t=void 0,n=void 0,i=void 0,c=void 0;(t=e.target.parentNode.parentNode.parentNode.parentNode.id)&&(i=(n=t.split("-"))[0],c=parseFloat(n[1]),a.deleteItem(i,c),l())},i=function(){var e,t;e=n.inputVals(),t=a.addItem(e.getType,e.getDesc,e.getValue),n.addItem(e.getType,t),l(),function(){a.calculatePercentages();var e=a.getPercentages();console.log(e+" e"),n.displayPercentages(e)}()};return{init:function(){document.querySelector(e.btn).addEventListener("click",i),document.addEventListener("keypress",function(e){13!==e.keycode&&13!==e.which||i()}),a.testings(),document.querySelector(e.container).addEventListener("click",t),n.displayBudget({incLable:0,expLable:0,budget:0,percentage:0})}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,

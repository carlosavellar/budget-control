"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var budgetController=function(){var l=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.valour=i,this.percentage=-1};l.prototype.updatePercentage=function(t){var n=void 0;return o.allitems.exp.map(function(e){return n=e.valour/t*100}),n},l.prototype.getPercentages=function(){(void 0).percentage=percentage};var a=function e(t,n,i){_classCallCheck(this,e),this.id=t,this.description=n,this.valour=i},e=function(e){var t=0;o.allitems[e].forEach(function(e){return t+=e.valour}),o.totals[e]=t},o={allitems:{inc:[],exp:[]},totals:{inc:0,exp:0},budget:0,percentage:-1};return{addItem:function(e,t,n){var i=void 0,c=void 0;return c=0<o.allitems[e].length?o.allitems[e][o.allitems[e].length-1].id+1:0,"inc"===e?i=new a(c,t,n):"exp"===e&&(i=new l(c,t,n)),o.allitems[e].push(i),i},deleteItem:function(e,t){var n;-1!==(n=o.allitems[t].map(function(e){return e.id}).indexOf(e))&&o.allitems[t].splice(n,1)},calculateBudget:function(){e("inc"),e("exp"),o.budget=o.totals.inc-o.totals.exp,0<o.totals.inc?o.percentage=o.totals.exp/o.totals.inc*100:o.percentage=-1},testings:function(){console.log(o)},getBudget:function(){return{budget:o.budget,percentage:o.percentage,inc:o.totals.inc,exp:o.totals.exp}},updatePercentages:function(){}}}(),uiController=function(){var l={type:".add__type",desc:".add__description",valour:".add__value",btn:".add__btn",incList:".income__list",expList:".expenses__list",container:".container",budget:".budget__value",income_lable:".budget__income--value",expense_lable:".budget__expenses--value",month:".budget__title--month",percentage:".budget__expenses--percentage"},n=function(e,t){var n,i=void 0;return 3<(i=(n=(e=(e=Math.abs(e)).toFixed(2)).split("."))[0])&&(i=i.substr(0,i.length-3)+"."+i.substr(3,3+i.length)),("inc"===t?"+":"-")+" "+i+","+n[1]};return{inputVals:function(){return{getType:document.querySelector(l.type).value,getDesc:document.querySelector(l.desc).value,getValue:parseInt(document.querySelector(l.valour).value)}},addItem:function(e,t){var n=void 0,i=void 0,c=void 0;"inc"===e?(c=l.incList,n='<div class="item clearfix" id="inc-%id%"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'):"exp"===e&&(c=l.expList,n='<div class="item clearfix" id="expense-0"> <div class="item__description">%desc%</div> <div class="right clearfix"> <div class="item__value">%val%</div> <div class="item__percentage">21%</div> <div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button> </div> </div> </div>'),i=(i=(i=n.replace("%id%",t.id)).replace("%desc%",t.description)).replace("%val%",t.valour),document.querySelector(c).insertAdjacentHTML("beforeend",i)},displayBudget:function(e){var t=void 0;t=0<e.budget?"+":"-",document.querySelector(l.income_lable).textContent=n(e.inc,"inc"),document.querySelector(l.expense_lable).textContent=n(e.exp,"exp"),document.querySelector(l.budget).textContent=n(e.budget,t),document.querySelector(l.percentage).textContent=e.percentage+" %"},deleteItem:function(e){var t=document.getElementById(e);t.parentNode.removeChild(t)},globalStrings:function(){return l}}}(),controller=function(l,a){var e=a.globalStrings(),o=function(){l.calculateBudget()},t=function(e){var t=void 0,n=void 0,i=void 0,c=void 0;(t=e.target.parentNode.parentNode.parentNode.parentNode.id)&&(i=(n=t.split("-"))[0],c=parseFloat(n[1]),l.deleteItem(c,i),a.deleteItem(t),o())},n=function(){var e,t,n;e=a.inputVals(),t=l.addItem(e.getType,e.getDesc,e.getValue),console.log(t),a.addItem(e.getType,t),o(),n=l.getBudget(),a.displayBudget(n)};return{init:function(){document.querySelector(e.btn).addEventListener("click",n),document.addEventListener("keypress",function(e){13!==e.keyCode&&13!==e.which||n()}),document.querySelector(e.container).addEventListener("click",t),a.displayBudget({budget:0,percentage:0,inc:0,exp:0})}}}(budgetController,uiController);controller.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJidWRnZXRDb250cm9sbGVyIiwiRXhwZW5zZSIsImRlc2NyaXB0aW9uIiwidmFsb3VyIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImlkIiwicGVyY2VudGFnZSIsInByb3RvdHlwZSIsInVwZGF0ZVBlcmNlbnRhZ2UiLCJ0b3RhbEluY29tZSIsIml0ZW0iLCJjdXJyIiwiZ2V0UGVyY2VudGFnZXMiLCJ1bmRlZmluZWQiLCJJbmNvbWUiLCJjYWxjVG90YWxzIiwidHlwZSIsInN1bSIsImRhdGEiLCJhbGxpdGVtcyIsImZvckVhY2giLCJlbCIsInRvdGFscyIsImV4cCIsImluYyIsImJ1ZGdldCIsIklEIiwiYWRkSXRlbSIsImxlbmd0aCIsIm5ld0l0ZW0iLCJpbmRleCIsIm1hcCIsImNhbGN1bGF0ZUJ1ZGdldCIsInRlc3RpbmdzIiwibG9nIiwiY29uc29sZSIsImdldEJ1ZGdldCIsInVwZGF0ZVBlcmNlbnRhZ2VzIiwidWlDb250cm9sbGVyIiwiZG9tc3RyaW5ncyIsImRlc2MiLCJidG4iLCJpbmNMaXN0IiwiZXhwTGlzdCIsImNvbnRhaW5lciIsImluY29tZV9sYWJsZSIsImV4cGVuc2VfbGFibGUiLCJtb250aCIsImZvcm10TnVtYmVycyIsIm51bSIsImludCIsInNwbGl0aXRlbSIsImRlYyIsInRvRml4ZWQiLCJzdWJzdHIiLCJpbnB1dFZhbHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImdldERlc2MiLCJnZXRUeXBlIiwib2JqIiwiaHRtbCIsIm5ld0h0bWwiLCJlbGVtZW50IiwicmVwbGFjZSIsImluc2VydEFkamFjZW50SFRNTCIsInRleHRDb250ZW50IiwiZGlzcGxheUJ1ZGdldCIsImRlbGV0ZUl0ZW0iLCJjb250cm9sbGVyIiwiYnVkZ2V0Q3RybCIsInVpQ3RybCIsIkRvbSIsImdsb2JhbFN0cmluZ3MiLCJjb250cm9sRGVsZWxlSXRlbSIsImUiLCJwYXJlbnROb2RlIiwic3BsaXQiLCJ0YXJnZXQiLCJzcGxpdEl0ZW0iLCJwYXJzZUZsb2F0IiwiY29udHJvbEFkZEl0ZW0iLCJpbnB1dCIsImdldFZhbHVlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TGlzdGVubmVycyIsImluaXQiXSwibWFwcGluZ3MiOiJ5SEFDQSxJQUFNQSxpQkFBb0IsV0FBSSxJQUVwQkMsRUFGSkQsU0FBQUEsRUFBQUEsRUFBb0JFLEVBQUlDLEdBQUFDLGdCQUFBQyxLQUFBSixHQUVwQkEsS0FGb0JLLEdBR3RCQSxFQUFvQ0QsS0FBQUgsWUFBQUEsRUFHaENHLEtBQUtGLE9BQVNBLEVBRmRFLEtBQUFFLFlBQUEsR0FJSE4sRUFScUJPLFVBQUFDLGlCQUFBLFNBQUFDLEdBWXRCLElBQUlDLE9BQUFBLEVBRUEsT0FIUlYsRUFBUU8sU0FBVUMsSUFBQUEsSUFBQUEsU0FBQUEsR0FDVkUsT0FBQUEsRUFBSkMsRUFBQVQsT0FBQU8sRUFBQSxNQUVJQyxHQUVKVixFQUFBTyxVQUFBSyxlQUFBLGlCQUxKQyxHQUFBUCxXQUFBQSxZQVgwQixJQW1CdEJRLEVBREosU0FBQUEsRUFBQVQsRUFBQUosRUFBQUMsR0FBQUMsZ0JBQUFDLEtBQUFVLEdBS1FWLEtBQUtDLEdBQUtBLEVBRlpTLEtBQ0ZiLFlBQUFBLEVBQXFDRyxLQUFBRixPQUFBQSxHQUVqQ2EsRUFBS2QsU0FBTGUsR0FDQSxJQUFBQyxFQUFLZixFQXpCYWdCLEVBQUFDLFNBQUFILEdBQUFJLFFBQUEsU0FBQUMsR0ErQmxCLE9BQU9KLEdBQU9JLEVBQUduQixTQUZyQmdCLEVBQUlELE9BQUpELEdBQUFDLEdBRUlDLEVBQUEsQ0FDSEMsU0FGRCxDQUdBRCxJQUFLSSxHQUxUQyxJQUFBLElBUUlKLE9BQUFBLENBQ0lLLElBQUssRUFDTEQsSUFBSyxHQUVURCxPQUFRLEVBQ0pFLFlBREksR0FBQSxNQUxELENBU1BDLFFBVE8sU0FBQVQsRUFBQWYsRUFBQUMsR0FVUEksSUFBQUEsT0FBQUEsRUFBYW9CLE9BQUFBLEVBY1IsT0FYTEMsRUFERSxFQUFBVCxFQUFBQyxT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LE1BR1EwQixTQUFBQSxjQUFBQSxFQUFBQSxXQUFBQSxpQkFBQUEsUUFBQUEsR0FLTlYsRUFBQUosY0FBQSxDQUNJM0MsT0FBQSxFQUNGNkQsV0FBQUEsRUFDT2xCLElBQUFBLEVBQ0MzQyxJQURjLE1BeERkLENBd0RjMUIsaUJBQXRCdUMsY0FNSGdDLFdBQUFpQiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGJ1ZGdldENvbnRyb2xsZXIgPSAoKCk9PntcbiAgICBcbiAgICBjbGFzcyBFeHBlbnNle1xuICAgICAgICBjb25zdHJ1Y3RvcihpZCwgZGVzY3JpcHRpb24sIHZhbG91cil7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLnZhbG91ciA9IHZhbG91cjtcbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9IC0xO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRXhwZW5zZS5wcm90b3R5cGUudXBkYXRlUGVyY2VudGFnZSA9ICh0b3RhbEluY29tZSk9PntcbiAgICAgICAgbGV0IGl0ZW07XG4gICAgICAgIGRhdGEuYWxsaXRlbXMuZXhwLm1hcChjdXJyPT57XG4gICAgICAgICAgICByZXR1cm4gaXRlbSA9IChjdXJyLnZhbG91ciAvIHRvdGFsSW5jb21lKSAqIDEwMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH07XG4gICAgRXhwZW5zZS5wcm90b3R5cGUuZ2V0UGVyY2VudGFnZXMgPSAoKT0+e1xuICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSBwZXJjZW50YWdlO1xuICAgIH07IFxuICAgIGNsYXNzIEluY29tZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGlkLCBkZXNjcmlwdGlvbiwgdmFsb3VyKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLnZhbG91ciA9IHZhbG91cjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjYWxjVG90YWxzID0gKHR5cGUpPT57XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBkYXRhLmFsbGl0ZW1zW3R5cGVdLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHN1bSArPSBlbC52YWxvdXI7XG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhLnRvdGFsc1t0eXBlXSA9IHN1bTtcbiAgICB9O1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBhbGxpdGVtczoge1xuICAgICAgICAgICAgaW5jOiBbXSxcbiAgICAgICAgICAgIGV4cDogW11cbiAgICAgICAgfSxcbiAgICAgICAgdG90YWxzOiB7XG4gICAgICAgICAgICBpbmM6IDAsXG4gICAgICAgICAgICBleHA6IDBcbiAgICAgICAgfSxcbiAgICAgICAgYnVkZ2V0OiAwLFxuICAgICAgICBwZXJjZW50YWdlOiAtMVxuICAgIH07XG4gICAgcmV0dXJue1xuICAgICAgICBhZGRJdGVtOiAodHlwZSwgZGVzY3JpcHRpb24sIHZhbG91cik9PntcbiAgICAgICAgICAgIGxldCBuZXdJdGVtLCBJRDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoZGF0YS5hbGxpdGVtc1t0eXBlXS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICBJRCA9IGRhdGEuYWxsaXRlbXNbdHlwZV1bZGF0YS5hbGxpdGVtc1t0eXBlXS5sZW5ndGggLSAxXS5pZCArMTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgSUQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2luYycpe1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXcgSW5jb21lKElELCBkZXNjcmlwdGlvbiwgdmFsb3VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2V4cCcpe1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXcgRXhwZW5zZShJRCwgZGVzY3JpcHRpb24sIHZhbG91cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmFsbGl0ZW1zW3R5cGVdLnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3SXRlbTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVJdGVtOiAoaWQsIHR5cGUpPT57XG4gICAgICAgICAgICBsZXQgaXRlbSwgaW5kZXg7XG4gICAgICAgICAgICBpdGVtID0gZGF0YS5hbGxpdGVtc1t0eXBlXS5tYXAoY3Vycj0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbmRleCA9IGl0ZW0uaW5kZXhPZihpZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKXtcbiAgICAgICAgICAgICAgICBkYXRhLmFsbGl0ZW1zW3R5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBjYWxjdWxhdGVCdWRnZXQ6ICgpPT57XG4gICAgICAgICAgICAvLyBjYWxjYSB0b3RsYXNcbiAgICAgICAgICAgIGNhbGNUb3RhbHMoJ2luYycpO1xuICAgICAgICAgICAgY2FsY1RvdGFscygnZXhwJyk7XG4gICAgICAgICAgICAvLyBjYWxjIGJ1ZGdldFxuICAgICAgICAgICAgLy8gY2FsYyBwZXJjZW50YWdlc1xuICAgICAgICAgICAgZGF0YS5idWRnZXQgID0gZGF0YS50b3RhbHMuaW5jIC0gZGF0YS50b3RhbHMuZXhwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihkYXRhLnRvdGFscy5pbmMgPiAwKXtcbiAgICAgICAgICAgICAgICBkYXRhLnBlcmNlbnRhZ2UgPShkYXRhLnRvdGFscy5leHAgLyBkYXRhLnRvdGFscy5pbmMpICogMTAwO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgZGF0YS5wZXJjZW50YWdlID0gLTE7XG4gICAgICAgICAgICB9XG4gIFxuICAgICAgICB9LFxuICAgICAgICB0ZXN0aW5nczogKCk9PntcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEJ1ZGdldDooKT0+e1xuICAgICAgICAgICAgcmV0dXJueyAgXG4gICAgICAgICAgICAgICAgYnVkZ2V0OiBkYXRhLmJ1ZGdldCxcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiBkYXRhLnBlcmNlbnRhZ2UsXG4gICAgICAgICAgICAgICAgaW5jOiBkYXRhLnRvdGFscy5pbmMsXG4gICAgICAgICAgICAgICAgZXhwOiBkYXRhLnRvdGFscy5leHBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVBlcmNlbnRhZ2VzOigpPT57XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG5jb25zdCB1aUNvbnRyb2xsZXIgPSAoKCk9PntcbiAgICBsZXQgZG9tc3RyaW5ncyA9IHsgXG4gICAgICAgIHR5cGU6IFwiLmFkZF9fdHlwZVwiLCBcbiAgICAgICAgZGVzYzogXCIuYWRkX19kZXNjcmlwdGlvblwiLFxuICAgICAgICB2YWxvdXI6IFwiLmFkZF9fdmFsdWVcIixcbiAgICAgICAgYnRuOiBcIi5hZGRfX2J0blwiLFxuICAgICAgICBpbmNMaXN0OiBcIi5pbmNvbWVfX2xpc3RcIixcbiAgICAgICAgZXhwTGlzdDogXCIuZXhwZW5zZXNfX2xpc3RcIixcbiAgICAgICAgY29udGFpbmVyOiBcIi5jb250YWluZXJcIixcbiAgICAgICAgYnVkZ2V0OiBcIi5idWRnZXRfX3ZhbHVlXCIsXG4gICAgICAgIGluY29tZV9sYWJsZTogXCIuYnVkZ2V0X19pbmNvbWUtLXZhbHVlXCIsXG4gICAgICAgIGV4cGVuc2VfbGFibGU6IFwiLmJ1ZGdldF9fZXhwZW5zZXMtLXZhbHVlXCIsXG4gICAgICAgIG1vbnRoOiBcIi5idWRnZXRfX3RpdGxlLS1tb250aFwiLFxuICAgICAgICBwZXJjZW50YWdlOiBcIi5idWRnZXRfX2V4cGVuc2VzLS1wZXJjZW50YWdlXCJcbiAgICB9O1xuICAgIGNvbnN0IGZvcm10TnVtYmVycyA9ICAobnVtLCB0eXBlKSA9PiB7XG4gICAgICAgIGxldCBpbnQsIGRlYywgc3BsaXRpdGVtO1xuICAgICAgICBudW0gPSBNYXRoLmFicyhudW0pO1xuICAgICAgICBudW0gPSBudW0udG9GaXhlZCgyKTtcbiAgICAgICAgc3BsaXRpdGVtID0gbnVtLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaW50ID0gc3BsaXRpdGVtWzBdO1xuICAgICAgICBpZiAoaW50ID4gMykge1xuICAgICAgICAgICAgaW50ID0gaW50LnN1YnN0cigwLCBpbnQubGVuZ3RoIC0gMykgKyAnLicgKyBpbnQuc3Vic3RyKDMsIDMgKyBpbnQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBkZWMgPSBzcGxpdGl0ZW1bMV07XG4gICAgICAgIHJldHVybiAodHlwZSA9PT0gJ2luYycgPyAnKycgOiAnLScpICsgJyAnICsgaW50ICsgJywnICsgZGVjO1xuICAgIH07XG4gICAgcmV0dXJue1xuICAgICAgICBpbnB1dFZhbHM6KCk9PntcbiAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICBnZXRUeXBlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRvbXN0cmluZ3MudHlwZSkudmFsdWUsXG4gICAgICAgICAgICAgICAgZ2V0RGVzYzogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihkb21zdHJpbmdzLmRlc2MpLnZhbHVlLFxuICAgICAgICAgICAgICAgIGdldFZhbHVlOiBwYXJzZUludChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRvbXN0cmluZ3MudmFsb3VyKS52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFkZEl0ZW06KHR5cGUsIG9iaik9PntcbiAgICAgICAgICAgIGxldCBodG1sLCBuZXdIdG1sLCBlbGVtZW50O1xuICAgICAgICAgICAgaWYodHlwZSA9PT0gJ2luYycpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb21zdHJpbmdzLmluY0xpc3Q7XG4gICAgICAgICAgICAgICAgaHRtbCA9ICc8ZGl2IGNsYXNzPVwiaXRlbSBjbGVhcmZpeFwiIGlkPVwiaW5jLSVpZCVcIj4gPGRpdiBjbGFzcz1cIml0ZW1fX2Rlc2NyaXB0aW9uXCI+JWRlc2MlPC9kaXY+IDxkaXYgY2xhc3M9XCJyaWdodCBjbGVhcmZpeFwiPiA8ZGl2IGNsYXNzPVwiaXRlbV9fdmFsdWVcIj4ldmFsJTwvZGl2PiA8ZGl2IGNsYXNzPVwiaXRlbV9fZGVsZXRlXCI+IDxidXR0b24gY2xhc3M9XCJpdGVtX19kZWxldGUtLWJ0blwiPjxpIGNsYXNzPVwiaW9uLWlvcy1jbG9zZS1vdXRsaW5lXCI+PC9pPjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2Pic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdleHAnKXtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9tc3RyaW5ncy5leHBMaXN0O1xuICAgICAgICAgICAgICAgIGh0bWwgPSAnPGRpdiBjbGFzcz1cIml0ZW0gY2xlYXJmaXhcIiBpZD1cImV4cGVuc2UtMFwiPiA8ZGl2IGNsYXNzPVwiaXRlbV9fZGVzY3JpcHRpb25cIj4lZGVzYyU8L2Rpdj4gPGRpdiBjbGFzcz1cInJpZ2h0IGNsZWFyZml4XCI+IDxkaXYgY2xhc3M9XCJpdGVtX192YWx1ZVwiPiV2YWwlPC9kaXY+IDxkaXYgY2xhc3M9XCJpdGVtX19wZXJjZW50YWdlXCI+MjElPC9kaXY+IDxkaXYgY2xhc3M9XCJpdGVtX19kZWxldGVcIj4gPGJ1dHRvbiBjbGFzcz1cIml0ZW1fX2RlbGV0ZS0tYnRuXCI+PGkgY2xhc3M9XCJpb24taW9zLWNsb3NlLW91dGxpbmVcIj48L2k+PC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0h0bWwgPSBodG1sLnJlcGxhY2UoJyVpZCUnLCBvYmouaWQpO1xuICAgICAgICAgICAgbmV3SHRtbCA9IG5ld0h0bWwucmVwbGFjZShcIiVkZXNjJVwiLCBvYmouZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgbmV3SHRtbCA9IG5ld0h0bWwucmVwbGFjZShcIiV2YWwlXCIsIG9iai52YWxvdXIpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50KS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIG5ld0h0bWwpO1xuICAgICAgICB9LFxuICAgICAgICBkaXNwbGF5QnVkZ2V0OiAob2JqKT0+e1xuICAgICAgICAgICAgbGV0IHR5cGU7XG4gICAgICAgICAgICBvYmouYnVkZ2V0ID4gMCA/IHR5cGUgPSAnKycgOiB0eXBlID0gJy0nO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihkb21zdHJpbmdzLmluY29tZV9sYWJsZSkudGV4dENvbnRlbnQgPSBmb3JtdE51bWJlcnMob2JqLmluYywgJ2luYycpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihkb21zdHJpbmdzLmV4cGVuc2VfbGFibGUpLnRleHRDb250ZW50ID0gZm9ybXROdW1iZXJzKG9iai5leHAsICdleHAnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZG9tc3RyaW5ncy5idWRnZXQpLnRleHRDb250ZW50ID0gZm9ybXROdW1iZXJzKG9iai5idWRnZXQsIHR5cGUpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihkb21zdHJpbmdzLnBlcmNlbnRhZ2UpLnRleHRDb250ZW50ID0gb2JqLnBlcmNlbnRhZ2UgKyAnICUnOyBcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlSXRlbTooZSk9PntcbiAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpO1xuICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdsb2JhbFN0cmluZ3M6KCk9PntcbiAgICAgICAgICAgIHJldHVybiBkb21zdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICB9XG5cbn0pKCk7XG5jb25zdCBjb250cm9sbGVyID0gKChidWRnZXRDdHJsLCB1aUN0cmwpPT57XG4gICAgbGV0IERvbSA9IHVpQ3RybC5nbG9iYWxTdHJpbmdzKCk7XG5cbiAgICBjb25zdCB1cGRhdGVCdWRnZXQgPSAoKT0+e1xuICAgICAgICBidWRnZXRDdHJsLmNhbGN1bGF0ZUJ1ZGdldCgpO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVQZXJjZW50YWdlcyA9ICgpPT57XG5cbiAgICB9O1xuXG4gICAgY29uc3QgY29udHJvbERlbGVsZUl0ZW0gPSAoZSk9PntcbiAgICAgICAgbGV0IGl0ZW0sIHNwbGl0SXRlbSwgdHlwZSwgSUQ7XG4gICAgICAgIGl0ZW0gPSBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmlkO1xuICAgICAgICBpZihpdGVtKXtcbiAgICAgICAgICAgIHNwbGl0SXRlbSA9IGl0ZW0uc3BsaXQoXCItXCIpO1xuICAgICAgICAgICAgdHlwZSA9IHNwbGl0SXRlbVswXTtcbiAgICAgICAgICAgIElEID0gcGFyc2VGbG9hdChzcGxpdEl0ZW1bMV0pO1xuXG4gICAgICAgICAgICBidWRnZXRDdHJsLmRlbGV0ZUl0ZW0oSUQsIHR5cGUpO1xuXG4gICAgICAgICAgICB1aUN0cmwuZGVsZXRlSXRlbShpdGVtKTtcblxuICAgICAgICAgICAgdXBkYXRlQnVkZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBjb25zdCBjb250cm9sQWRkSXRlbSA9ICgpPT57XG4gICAgICAgIGxldCBpbnB1dCwgbmV3SXRlbSwgYnVkZ2V0O1xuICAgICAgICBpbnB1dCA9IHVpQ3RybC5pbnB1dFZhbHMoKTtcbiAgICAgICAgbmV3SXRlbSA9IGJ1ZGdldEN0cmwuYWRkSXRlbShpbnB1dC5nZXRUeXBlLCBpbnB1dC5nZXREZXNjLCBpbnB1dC5nZXRWYWx1ZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKG5ld0l0ZW0pO1xuXG4gICAgICAgIHVpQ3RybC5hZGRJdGVtKGlucHV0LmdldFR5cGUsIG5ld0l0ZW0pO1xuICAgICAgICBcbiAgICAgICAgdXBkYXRlQnVkZ2V0KCk7XG5cbiAgICAgICAgYnVkZ2V0ID0gYnVkZ2V0Q3RybC5nZXRCdWRnZXQoKTtcblxuICAgICAgICB1aUN0cmwuZGlzcGxheUJ1ZGdldChidWRnZXQpO1xuXG5cbiAgICB9O1xuICAgIGNvbnN0IGV2ZW50TGlzdGVubmVycyA9ICgpPT57XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRG9tLmJ0bikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb250cm9sQWRkSXRlbSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZT0+e1xuICAgICAgICAgICAgaWYoZS5rZXlDb2RlID09PSAxMyB8fCBlLndoaWNoID09PSAxMyl7XG4gICAgICAgICAgICAgICAgY29udHJvbEFkZEl0ZW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoRG9tLmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb250cm9sRGVsZWxlSXRlbSk7XG4gICAgfTtcbiAgICByZXR1cm57XG4gICAgICAgIGluaXQ6ICgpPT57XG4gICAgICAgICAgICBldmVudExpc3Rlbm5lcnMoKTtcbiAgICAgICAgICAgIHVpQ3RybC5kaXNwbGF5QnVkZ2V0KCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZGdldDogMCxcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogMCxcbiAgICAgICAgICAgICAgICAgICAgaW5jOiAwLFxuICAgICAgICAgICAgICAgICAgICBleHA6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn0pKGJ1ZGdldENvbnRyb2xsZXIsIHVpQ29udHJvbGxlcik7XG5jb250cm9sbGVyLmluaXQoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
